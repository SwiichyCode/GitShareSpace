// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                       String       @id @default(cuid())
    name                     String?
    email                    String?      @unique
    emailVerified            DateTime?
    repositoryAlreadyStarred String[]
    image                    String?
    firstConnection          Boolean      @default(true)
    dataSharingAgreement     Boolean      @default(false)
    role                     Role         @default(USER)
    accounts                 Account[]
    sessions                 Session[]
    posts                    Post[]
    repositories             Repository[]
    likes                    Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Repository {
    id                    Int      @id @default(autoincrement())
    url                   String
    description           String?
    repositoryId          Int
    repositoryName        String
    repositoryDescription String?
    repositoryStargazers  Int
    repositoryCreatedAt   DateTime
    repositoryUpdatedAt   DateTime
    repositoryLicenseName String   @default("No license")
    repositoryLicenseUrl  String   @default("No license url")
    is_template           Boolean  @default(false)
    ownerId               Int
    ownerUsername         String
    ownerAvatarUrl        String
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    createdBy             User     @relation(fields: [createdById], references: [id])
    createdById           String
    languageId            Int
    language              Language @relation(fields: [languageId], references: [id])
    topics                Topic[]
    likes                 Like[]

    @@index([url])
}

model Like {
    id           Int        @id @default(autoincrement())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    repositoryId Int
    repository   Repository @relation(fields: [repositoryId], references: [id])
    userId       String
    user         User       @relation(fields: [userId], references: [id])
}

model Language {
    id           Int          @id @default(autoincrement())
    name         String       @unique
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    repositories Repository[]
}

model Topic {
    id           Int          @id @default(autoincrement())
    name         String       @unique @default("No topic")
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    repositories Repository[]
}

enum Role {
    USER
    ADMIN
    DEVELOPER
}
